#include "ies/Common/Byte.hpp"

#include "gtest/gtest.h"

#include <iostream>

namespace ies
{

TEST(Byte, EmptyArray)
{
    ByteArray emptyArray;
    std::string expectArrayString =
        "ByteArray {unnamed}, range [0, 0), size [0]:\n"
        "|00 01 02 03 04 05 06 07|08 09 0A 0B 0C 0D 0E 0F| Line Offset\n"
        "+-----------------------+-----------------------+\n";
    ASSERT_EQ(expectArrayString, ToString(emptyArray));
}

TEST(Byte, ByteArray)
{
    ByteArray myArray
    {
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x13, 0x02, 0x32, 0x62, 0x88,
    };

    std::string expectArrayString =
        "ByteArray {myArray}, range [0, 21), size [21]:\n"
        "|00 01 02 03 04 05 06 07|08 09 0A 0B 0C 0D 0E 0F| Line Offset\n"
        "+-----------------------+-----------------------+\n"
        "|1B 01 31 01 17 04 18 85|87 14 30 35 39 38 36 35| 00\n"
        "|13 02 32 62 88         |                       | 10\n";

    ASSERT_EQ(expectArrayString, ToString(myArray, "myArray"));
}

TEST(Byte, ByteArrayTwoFullLine)
{
    ByteArray myArray
    {
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
    };

    std::string expectArrayString =
        "ByteArray {myArray}, range [0, 32), size [32]:\n"
        "|00 01 02 03 04 05 06 07|08 09 0A 0B 0C 0D 0E 0F| Line Offset\n"
        "+-----------------------+-----------------------+\n"
        "|1B 01 31 01 17 04 18 85|87 14 30 35 39 38 36 35| 00\n"
        "|1B 01 31 01 17 04 18 85|87 14 30 35 39 38 36 35| 10\n";

    ASSERT_EQ(expectArrayString, ToString(myArray, "myArray"));
}

TEST(Byte, ByteArrayOfRange)
{
    ByteArray myArray
    {
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
    };

    std::string expectArrayString =
        "ByteArray {unnamed}, range [7, 26), size [19]:\n"
        "|00 01 02 03 04 05 06 07|08 09 0A 0B 0C 0D 0E 0F| Line Offset\n"
        "+-----------------------+-----------------------+\n"
        "|                     85|87 14 30 35 39 38 36 35| 00\n"
        "|1B 01 31 01 17 04 18 85|87 14                  | 10\n";

    ASSERT_EQ(expectArrayString, ToString(myArray, 7, 0x1A));
}

TEST(Byte, ByteArrayOfSkippingLineRange)
{
    ByteArray myArray
    {
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
    };

    std::string expectArrayString =
        "ByteArray {unnamed}, range [23, 42), size [19]:\n"
        "|00 01 02 03 04 05 06 07|08 09 0A 0B 0C 0D 0E 0F| Line Offset\n"
        "+-----------------------+-----------------------+\n"
        "|                     85|87 14 30 35 39 38 36 35| 10\n"
        "|1B 01 31 01 17 04 18 85|87 14                  | 20\n";

    ASSERT_EQ(expectArrayString, ToString(myArray, 0x17, 0x2A));
}

TEST(Byte, ByteArrayHexLineCount)
{
    ByteArray myArray
    {
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,

        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,

        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,

        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
    };

    std::string expectArrayString =
        "ByteArray {unnamed}, range [160, 192), size [32]:\n"
        "|00 01 02 03 04 05 06 07|08 09 0A 0B 0C 0D 0E 0F| Line Offset\n"
        "+-----------------------+-----------------------+\n"
        "|1B 01 31 01 17 04 18 85|87 14 30 35 39 38 36 35| A0\n"
        "|1B 01 31 01 17 04 18 85|87 14 30 35 39 38 36 35| B0\n";

    ASSERT_EQ(expectArrayString, ToString(myArray, 0xA0, 0xC0));
}

TEST(Byte, ByteArrayOfInvalidRange)
{
    ByteArray myArray
    {
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
    };

    std::string expectArrayString =
        "ByteArray {unnamed}, range [3, 3), size [0]:\n"
        "|00 01 02 03 04 05 06 07|08 09 0A 0B 0C 0D 0E 0F| Line Offset\n"
        "+-----------------------+-----------------------+\n";

    ASSERT_EQ(expectArrayString, ToString(myArray, 9, 3));
}

TEST(Byte, CString)
{
    //'' in c-string form beware of null terminate.
    char array[33] =
        "\x1b\x01\x31\x01\x17\x04\x18\x85\x87\x14\x30\x35\x39\x38\x36\x35"
        "\x1b\x01\x31\x01\x17\x04\x18\x85\x87\x14\x30\x35\x39\x38\x36\x35";

    auto size = sizeof(array)/sizeof(array[0])-1;

    std::string expectArrayString =
        "ByteArray {unnamed}, range [0, 32), size [32]:\n"
        "|00 01 02 03 04 05 06 07|08 09 0A 0B 0C 0D 0E 0F| Line Offset\n"
        "+-----------------------+-----------------------+\n"
        "|1B 01 31 01 17 04 18 85|87 14 30 35 39 38 36 35| 00\n"
        "|1B 01 31 01 17 04 18 85|87 14 30 35 39 38 36 35| 10\n";

    ASSERT_EQ(expectArrayString, ToString(reinterpret_cast<Byte*>(&array), 0, size));
}

TEST(Byte, CArray)
{
    uint8_t array[32] =
    {
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
        0x1b, 0x01, 0x31, 0x01, 0x17, 0x04, 0x18, 0x85, 0x87, 0x14, 0x30, 0x35, 0x39, 0x38, 0x36, 0x35,
    };

    auto size = sizeof(array)/sizeof(array[0]);

    std::string expectArrayString =
        "ByteArray {unnamed}, range [0, 32), size [32]:\n"
        "|00 01 02 03 04 05 06 07|08 09 0A 0B 0C 0D 0E 0F| Line Offset\n"
        "+-----------------------+-----------------------+\n"
        "|1B 01 31 01 17 04 18 85|87 14 30 35 39 38 36 35| 00\n"
        "|1B 01 31 01 17 04 18 85|87 14 30 35 39 38 36 35| 10\n";

    ASSERT_EQ(expectArrayString, ToString(reinterpret_cast<Byte*>(&array), 0, size));
}

}
